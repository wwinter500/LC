using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Collections;

namespace Leetcode
{
    public enum easyfunc : int 
    {
        FindRadius = 0,
        FindUnsortedSubarray,
        CountBinaryString,
        IsPalindrome_s,
        dp_climb,
        subset,
        findcloset,
        letterpermutate,
        candyexchange
    }
    public partial class Easy
    {
        public void EasyRun(string func)
        {
            object result = null;
            if (func == easyfunc.FindUnsortedSubarray.ToString())
            {
                int[] test = { 1, 2, 3, 3, 3 };
                //int[] test = {2,6,4,8,10,9,15};
                //int[] test = { 2, 1 };
                result = FindUnsortedSubarray(test);
            }
            if (func == easyfunc.CountBinaryString.ToString())
            {
                //string test
                //string test = "00110";
                string test = "10101";
                result = CountBinarySubstrings(test);
            }
            if (func == easyfunc.IsPalindrome_s.ToString())
            {
                string test = "A man, a plan, a canal: Panama";
                //string test = "race a car";
                //string test = "0P";
                result = IsPalindrome(test);
            }
            if (func == easyfunc.dp_climb.ToString())
            {
                int[] test = { 0, 1, 2, 0 };
                result = MinCostClimbingStairs(test);
            }
            if (func == easyfunc.subset.ToString())
            {
                List<IList<int>> r = Getsubset(5, 1, 5);
                foreach (List<int> str in r)
                {
                    string s = "";
                    foreach (int val in str)
                        s += val.ToString() + " ";

                    Console.WriteLine(s);
                }

                result = r.Count;
            }
            if (func == easyfunc.letterpermutate.ToString())
            {
                IList<string> r = LetterCasePermutation("C");
                foreach (string s in r)
                    Console.WriteLine(s);
            }
            if (func == easyfunc.candyexchange.ToString())
            {
                int[] A = new int[3] { 1, 2, 5};
                int[] B = new int[2] { 2, 4 };
                int[] re = FairCandySwap(A, B);

                Console.WriteLine(re[0] + " " + re[1]);
            }                        
        }

        ////////////////////////////////
        /**/
        public int FindRadius(int[] houses, int[] heaters)
        {
            int radius = 1;
            int hn = houses.Length, heats = heaters.Length;
            if (heats <= 0)
                return 0;
            if (hn <= 0)
                return 1;

            Hashtable hs = new Hashtable();
            while (true)
            {
                foreach (int hi in heaters)
                {
                    for (int i = radius; i >= 0; i--)
                    {
                        if (!hs.ContainsKey(hi - i))
                            hs.Add(hi - i, 1);
                        if (!hs.ContainsKey(hi + i))
                            hs.Add(hi + i, 1);
                    }
                }

                bool coverall = true;
                foreach (int ho in houses)
                    if (!hs.ContainsKey(ho))
                    {
                        coverall = false;
                        radius++;
                        hs.Clear();
                        break;
                    }

                if (coverall)
                    break;
            }

            return radius;
        }

        public int FindCloset(int val, List<int> arr, int start, int end)
        {
            if (start == end)
                return Math.Abs(arr[start] - val);
            else if (start == end - 1)
                return Math.Min(Math.Abs(arr[start] - val), Math.Abs(arr[end] - val));
            else
            {
                int mid = (start + end) / 2;
                int dl = FindCloset(val, arr, start, mid);
                int dr = FindCloset(val, arr, mid + 1, end);

                return Math.Min(dl, dr);
            }
        }
    }
}
